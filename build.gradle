plugins {
    alias libs.plugins.architectury
    alias libs.plugins.architectury.loom apply false
    alias libs.plugins.vineFlower apply false // VineFlower, a better decompiler
    alias libs.plugins.machete // automatic jar compressing on build
    alias libs.plugins.shadow
}

apply plugin: "dev.architectury.loom"
//apply plugin: "io.github.juuxel.loom-vineflower"
apply plugin: "java"
apply plugin: "architectury-plugin"
apply plugin: "maven-publish"

archivesBaseName = "${project.name}-${libs.versions.minecraft.get()}"
group = properties.maven_group

// Formats the mod version to include the loader, Minecraft version, and build number (if present)
String buildNumber = System.getenv("GITHUB_ACTION_NUMBER")
version = "${mod_version}" + (buildNumber != null ? "-build_${System.getenv("GITHUB_RUN_NUMBER")}" : "")


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release.set 17
}

java {
    withSourcesJar()
}

def mod_id = properties.mod_id

architectury {
    platformSetupLoomIde()
    forge()
    minecraft = libs.versions.minecraft
}

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfig(
                "${mod_id}.mixins.json",
        )
        dataGen{
            mod(mod_id)
        }
    }

    runConfigs.named("data").configure {
        programArg("--existing=" + file("src/main/resources").absolutePath)
        programArgs("--client", "--server")
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
                vmArgs '-XX:HotswapAgent=fatjar'
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    mavenLocal()
    flatDir {
        dir 'libs'
    }
    mavenCentral()
    maven {
        name = 'GTCEu Maven'
        url = 'https://maven.gtceu.com'
        content {
            includeGroup 'com.gregtechceu.gtceu'
        }
    }
    maven {
        name 'FirstDarkDev'
        url "https://maven.firstdarkdev.xyz/snapshots/"
    }
    maven {
        name 'Quilt'
        url 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { // Registrate
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.jozufozu.flywheel")
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven {
        // Patchouli, JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Curse Forge File
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // EMI
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:$project.minecraft_version"
    forge "net.minecraftforge:forge:$project.minecraft_version-$project.forge_version"
    // layered mappings - Mojmap names, parchment and QM docs and parameters
    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:$project.minecraft_version+build.$project.quilt_mappings:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-$project.minecraft_version:$project.parchment_mappings@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    }

    modCompileOnly("mezz.jei:jei-$project.minecraft_version-forge-api:$project.jei_version") { transitive = false }
    modCompileOnly("mezz.jei:jei-$project.minecraft_version-common-api:$project.jei_version") { transitive = false }

    modImplementation("com.gregtechceu.gtceu:gtceu-$project.minecraft_version:$project.gtceu_version") { transitive = false }
    modImplementation("com.lowdragmc.ldlib:ldlib-forge-$project.minecraft_version:$project.ldlib_version") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:$project.registrate_version")
    modImplementation("dev.latvian.mods:kubejs-forge:$project.kubejs_version")

    modRuntimeOnly("dev.toma.configuration:configuration-forge-$project.minecraft_version:$project.configuration_version")
    modRuntimeOnly("mezz.jei:jei-$project.minecraft_version-forge:$project.jei_version") { transitive = false }

    modRuntimeOnly ("dev.emi:emi-forge:$project.emi_version+$project.minecraft_version")

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:$project.mixinextras_version"))
    implementation(include("io.github.llamalad7:mixinextras-forge:$project.mixinextras_version"))

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

processResources {
    // set up properties for filling into metadata
    var properties = [
            "version": version,
            "mod_id": project.mod_id,
            "forge_version": forge.versions.forgeShortVersion.get().split("\\.")[0], // only specify major version of forge
            "minecraft_version": libs.versions.minecraft.get(),
            "gtceu_version": forge.versions.gtceu.get(),
            "mod_name": mod_name,
    ]
    inputs.properties(properties)

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

remapJar {
    inputFile.set jar.archiveFile
    dependsOn(":optimizeOutputsOfJar")
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}